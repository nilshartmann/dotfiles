#!/usr/bin/env bash

# Easier navigation: .., ..., ...., ....., ~ and -
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias js="cd ~/develop/javascript"
alias ns="ssh nils@nilshartmann.net"

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
	colorflag="--color"
	export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
else # macOS `ls`
	colorflag="-G"
	export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"

# Always enable colored `grep` output
# Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Get week number
alias week='date +%V'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Get macOS Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update; sudo gem cleanup'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Show active network interfaces
alias ifactive="ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active'"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Canonical hex dump; some systems have this symlinked
command -v hd > /dev/null || alias hd="hexdump -C"

# macOS has no `md5sum`, so use `md5` as a fallback
command -v md5sum > /dev/null || alias md5sum="md5"

# macOS has no `sha1sum`, so use `shasum` as a fallback
command -v sha1sum > /dev/null || alias sha1sum="shasum"

# JavaScriptCore REPL
jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
[ -e "${jscbin}" ] && alias jsc="${jscbin}";
unset jscbin;

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Empty the Trash on all mounted volumes and the main HDD.
# Also, clear Apple’s System Logs to improve shell startup speed.
# Finally, clear download history from quarantine. https://mths.be/bum
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl; sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"

# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon
# (useful when executing time-consuming commands)
alias badge="tput bel"

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	alias "$method"="lwp-request -m '$method'"
done

# Make Grunt print stack traces by default
command -v grunt > /dev/null && alias grunt="grunt --stack"

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume output volume 100'"

# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

# Start local http server on port 4444
alias http_server="python -m SimpleHTTPServer 4444"

# Open favourite ui tools from cmd line

# PathFinder
pf () {
  if [ "$#" = "0" ]
  then
    open -a 'Path Finder' `pwd`
  else
    open -a 'Path Finder' $1
  fi
}

# Atlassian SourceTree
st () {
  if [ "$#" = "0" ]
  then
	open -a 'SourceTree' `pwd`
  else
    open -a 'SourceTree' $1
  fi
}

# SmartGit
sg () {
  if [ "$#" = "0" ]
  then
    open -a 'SmartGit' `pwd`
  else
    open -a 'SmartGit' $1
  fi
}

# TextWranger
tw() {
  open -a TextWrangler $1
}

# Start Visual Studio Code
#function code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*; }

# Insiders Build with Proxy Settings as in Chrome (https://github.com/Microsoft/vscode/issues/22214)
function code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args --proxy-server=127.0.0.1:3128 $*; }

cr() {
  open -a /Applications/Google\ Chrome.app/ --args --proxy-server=127.0.0.1:3128
}

# Alias for p4merge to invoke with 'p4diff' to compare two files
p4diff() {
	/Applications/p4merge.app/Contents/Resources/launchp4merge $1 $2
}



# Create a private BitBucket repo with one command
# --------------------------------------------------------------------------------
#
# Uses the BitBucket REST API to create a new private, non-forkable repository
# for the local Git repository your currently staying in.
# The content of your local repository gets pushed after the repository is created.
#
# Prequisites:
# - you must have curl installed
# - your local repo must not have a remote already connect to a bitbucket repo
# - your local repo must not have an origin 'remote'
#
# Usage
# 1. Add this method to your .bash_profile or .bash_rc
# 2. Switch to a directory that contains a git directory (i.e. have a '.git'-folder inside)
# 3. run 'add_bb' (you will be asked for your BitBucket username and password)
# 4. The name of the remote repository will be determined from your current path name
#    (Path '/home/nils/repos/My First Git Repo'  would become my_first_git_repo in BitBucket)
#    If that's not good for you, you can specify a repository name as first parameter to the
#    method call  (add_bb another_repo_name)
#
# You must have enabled two factor authentification in BitBucket and created an App password
# (https://confluence.atlassian.com/bitbucket/app-passwords-828781300.html). The App password
# is read from the env variable BB_PASSWORD. If this variable is NOT set you will be
# prompted to enter your app password when this script is run
add_bb() {
  REPO_NAME=$1

  if [ -z "$REPO_NAME" ]; then
    # Remove spaces from repository name and convert to lowercase
    REPO_NAME=$(basename `pwd | sed 's/ /_/g'|tr A-Z a-z`)
  fi;

  if [ ! -d .git/ ]; then
	  echo "No Git repository inside this directory. Please init with 'git init' first";
	  return;
  fi

  # Check, if bitbucket is already registered as remote
  git remote -v|grep bitbucket.org
  if [ "$?" == "0" ]; then
    echo "Repository already has a BitBucket remote"
    return;
  fi;

  # Check if there is already a remote called 'origin'
  git remote|grep origin
  if [ "$?" == "0" ]; then
    echo "Repository alread has an 'origin' remote"
    return;
  fi

  if [ -z "$BB_USER" ]; then
   local BB_USER
   echo "Enter BitBucket User name (avoid this by setting BB_USER env variable)"
   read BB_USER
  fi;

  if [ -z "$BB_PASSWORD" ]; then
    local BB_PASSWORD
    echo "Enter BitBucket (app) password (WARNING: will be displayed in clear text)"
    echo "Avoid this by setting the BB_PASSWORD env variable"
    read BB_PASSWORD
  fi

  echo Creating Repository $REPO_NAME
  read -p "To confirm press any key, otherwise quit with 'n' or ctrl+c" -n 1 confirmation
  echo
  if [ "$confirmation" == "n" ]; then
    echo "cancelled."
    return;
  fi;

  # REST Call
  curl -f -X POST -v -u $BB_USER:$BB_PASSWORD -H "Content-Type: application/json" \
  https://api.bitbucket.org/2.0/repositories/$BB_USER/$REPO_NAME \
  -d '{"scm": "git", "is_private": "true", "fork_policy": "no_public_forks" }'

  if [ "$?" == "22" ]; then
    echo "REST Call to BitBucket failed. Repository has not been created."
    return;
  fi

  echo Add remote 'origin' and push to $REPO_NAME
	# Must use SSH with 2FA (https://confluence.atlassian.com/bitbucket/use-the-ssh-protocol-with-bitbucket-cloud-221449711.html)
  git remote add origin ssh://git@bitbucket.org/$BB_USER/$REPO_NAME.git
  git push -u origin --all

  echo "Done. You can find your new repository here: https://bitbucket.org/$BB_USER/$REPO_NAME"
}

alias on="code ~/notes"
